/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.featurevisor.sdk

import com.featurevisor.sdk.mocks.DatafileFetchHandlerTest
import com.featurevisor.types.DatafileContent
import dev.mokkery.answering.returns
import dev.mokkery.every
import dev.mokkery.mock
import dev.mokkery.verify
import dev.mokkery.verify.VerifyMode.Companion.exactly
import io.kotest.matchers.shouldBe
import kotlinx.coroutines.delay
import kotlinx.coroutines.test.runTest
import kotlinx.coroutines.withTimeout
import kotlin.concurrent.atomics.AtomicBoolean
import kotlin.concurrent.atomics.ExperimentalAtomicApi
import kotlin.test.Test

// Create a named class instead of anonymous object

@OptIn(ExperimentalAtomicApi::class)
class InstanceTest {
    private val datafileUrl = "https://www.testmock.com"

    private val datafileContent = DatafileContent(
        schemaVersion = "0",
        revision = "0",
        attributes = listOf(),
        segments = listOf(),
        features = listOf()
    )

    @Test
    fun `instance initialised properly`() {
        val instanceOptions = InstanceOptions(
            bucketKeySeparator = "",
            configureBucketKey = null,
            configureBucketValue = null,
            datafile = datafileContent,
            datafileUrl = null,
            handleDatafileFetch = null,
            initialFeatures = mapOf(),
            interceptContext = null,
            logger = null,
            onActivation = {},
            onReady = {},
            onRefresh = {},
            onUpdate = {},
            refreshInterval = null,
            stickyFeatures = mapOf(),
            onError = {},
        )

        val systemUnderTest = FeaturevisorInstance.createInstance(options = instanceOptions)
        systemUnderTest.statuses.ready shouldBe true
    }

    @Test
    fun `instance fetches data using handleDatafileFetch`() = runTest {
        val readyCallbackTriggered = AtomicBoolean(false)

        val mockHandler: DatafileFetchHandler = mock<DatafileFetchHandlerTest> {
            every { invoke(datafileUrl) } returns Result.success(datafileContent)
        }

        val instanceOptions = InstanceOptions(
            bucketKeySeparator = "",
            configureBucketKey = null,
            configureBucketValue = null,
            datafile = null,
            datafileUrl = datafileUrl,
            handleDatafileFetch = mockHandler,
            initialFeatures = mapOf(),
            interceptContext = null,
            logger = null,
            onActivation = {},
            onReady = {
                readyCallbackTriggered.store(true)
            },
            onRefresh = {},
            onUpdate = {},
            onError = {},
            refreshInterval = null,
            stickyFeatures = mapOf(),
        )

        val instance = FeaturevisorInstance.createInstance(options = instanceOptions)

        // Wait for the callback to be triggered with timeout
        withTimeout(5000) { // 5 second timeout
            while (!readyCallbackTriggered.load()) {
                delay(50) // Check every 50ms
            }
        }

        // Verify the mock was called
        verify(exactly(1)) {
            mockHandler.invoke(datafileUrl)
        }

        readyCallbackTriggered.load() shouldBe true
        instance.statuses.ready shouldBe true
    }
}