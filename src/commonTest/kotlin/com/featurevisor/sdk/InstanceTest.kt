/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.featurevisor.sdk

import com.featurevisor.types.DatafileContent
import io.kotest.matchers.shouldBe
import kotlinx.coroutines.test.runTest
import kotlin.concurrent.atomics.ExperimentalAtomicApi
import kotlin.test.Test

// Create a named class instead of anonymous object

@OptIn(ExperimentalAtomicApi::class)
class InstanceTest {

    private val datafileContent = DatafileContent(
        schemaVersion = "0",
        revision = "0",
        attributes = listOf(),
        segments = listOf(),
        features = listOf()
    )

    @Test
    fun `instance initialised properly with datafile`() {
        val instanceOptions = InstanceOptions(
            bucketKeySeparator = "",
            configureBucketKey = null,
            configureBucketValue = null,
            initialFeatures = mapOf(),
            interceptContext = null,
            logger = null,
            onRefresh = {},
            onActivation = {},
            stickyFeatures = mapOf(),
        )

        val systemUnderTest = FeaturevisorInstance.createInstance(
            datafile = datafileContent,
            options = instanceOptions
        )

        // Should be ready immediately with datafile
        systemUnderTest.getRevision() shouldBe "0"
    }

    @Test
    fun `instance starts empty and accepts datafile later`() {
        val systemUnderTest = FeaturevisorInstance.createInstance()

        // Should start with empty datafile
        systemUnderTest.getRevision() shouldBe "empty"

        // Update with new datafile
        systemUnderTest.setDatafile(datafileContent)

        // Should now have new revision
        systemUnderTest.getRevision() shouldBe "0"
    }

    @Test
    fun `instance accepts datafile from JSON string`() {
        val systemUnderTest = FeaturevisorInstance.createInstance()

        val datafileJson = """
        {
            "schemaVersion": "1",
            "revision": "test-revision",
            "attributes": [],
            "segments": [],
            "features": []
        }
        """.trimIndent()

        systemUnderTest.setDatafile(datafileJson)

        systemUnderTest.getRevision() shouldBe "test-revision"
    }

    @Test
    fun `refresh callback is triggered when datafile is updated`() = runTest {
        var refreshCallbackTriggered = false
        var receivedDatafile: DatafileContent? = null

        val instanceOptions = InstanceOptions(
            onRefresh = { args ->
                refreshCallbackTriggered = true
                receivedDatafile = args[0] as DatafileContent
            }
        )

        val systemUnderTest = FeaturevisorInstance.createInstance(
            options = instanceOptions
        )

        // Update datafile should trigger refresh callback
        systemUnderTest.setDatafile(datafileContent)

        refreshCallbackTriggered shouldBe true
        receivedDatafile shouldBe datafileContent
    }

    @Test
    fun `instance can be created with logger`() {
        val logger = Logger.createLogger(Logger.LogLevel.DEBUG)

        val instanceOptions = InstanceOptions(
            logger = logger
        )

        val systemUnderTest = FeaturevisorInstance.createInstance(
            datafile = datafileContent,
            options = instanceOptions
        )

        systemUnderTest.getRevision() shouldBe "0"
    }

    @Test
    fun `sticky features can be set and updated`() {
        val systemUnderTest = FeaturevisorInstance.createInstance()

        val stickyFeatures = mapOf(
            "test_feature" to com.featurevisor.types.OverrideFeature(
                enabled = true,
                variation = "treatment"
            )
        )

        systemUnderTest.setStickyFeatures(stickyFeatures)

        // Verify it doesn't crash (internal state is private)
        systemUnderTest.getRevision() shouldBe "empty"
    }
}